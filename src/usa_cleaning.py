# -*- coding: utf-8 -*-
"""USA_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HoRgwDqmX4yx9cwJ30SVZExUZI1m5GUp
"""

import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import datetime
from datetime import datetime as dt


df = pd.read_csv('data/US_confirmed.csv')
df.head()

# Add data of all states to get total US cases

data = df.values
data = np.sum(data, axis=0)
data = data[1:]
print(len(data))

# Find daily cases

data_daily = np.zeros(len(data))
data_daily[0] = data[0]
for x in range(1, len(data)):
  data_daily[x] = data[x] - data[x-1]
plt.plot(data_daily)
plt.show()
# print(len(data_daily))
cases = data_daily

# Create a list of dates

start_date = datetime.datetime(2020, 1, 22)
end_date = datetime.datetime(2021, 4, 3)
delta = datetime.timedelta(days=1)
date = []

while start_date<=end_date:
  date.append(start_date)
  start_date += delta

print(len(date))

# Follow the same procedure for deaths

df = pd.read_csv('data/US_deaths.csv')
df.head()

# Add data of all states to get total US deaths
data = df.values
data = np.sum(data, axis=0)
data = data[1:]
print(len(data))

# Find daily deaths
data_daily = np.zeros(len(data))
data_daily[0] = data[0]
for x in range(1, len(data)):
  data_daily[x] = data[x] - data[x-1]
plt.plot(data_daily)
plt.show()
# print(len(data_daily))
death = data_daily

# apply tukeys rule for removing outliers

import statistics

def tukey(price_list):
  month_price_list = []
  # lst1 = price_list[i:i+30] for i in range(0,len(df)-30+1,30)]
  for i in range(0,len(price_list)-30+1,30):
    month_price_list.append(price_list[i:i+30])
  month_price_list.append(price_list[420:])
  price_list_tukey = []
  for month in month_price_list:
    median = statistics.median(month)
    month_sorted = np.sort(month)
    q25 = month_sorted[math.ceil((25/100)*len(month))-1]
    q75 = month_sorted[math.ceil((75/100)*len(month))-1]
    iqr = q75 - q25
    cut_off = iqr * 1.5
    lower, upper = q25 - cut_off, q75 + cut_off
    numchanges = 0
    for i, x in enumerate(month):
        if x < lower or x > upper:
            month[i] = median
            numchanges += 1
    print("outliers = ", numchanges)
    price_list_tukey.extend(month)
    # plt.plot(price_list_tukey)
  return price_list_tukey

cases = tukey(cases)
plt.plot(cases)
plt.show()

death = tukey(death)
plt.plot(death)
plt.show()

dict = {'Date': date, 'Cases': [int(i) for i in cases], 'Death': [int(i) for i in death]}         
df1 = pd.DataFrame(dict)

df1.to_csv('data/USA_clean.csv')

start = datetime.datetime(2020, 8, 10)
end = datetime.datetime(2020, 12, 31)
df_clean = pd.read_csv('data/USA_clean.csv')

def get_data(start, end, df_clean):
  cases = [int(df_clean['Cases'][i]) for i in range(0, len(df_clean['Date'])) if dt.strptime(df_clean['Date'][i], "%Y-%m-%d")>=start and dt.strptime(df_clean['Date'][i], "%Y-%m-%d")<=end]
  death = [int(df_clean['Death'][i]) for i in range(0, len(df_clean['Date'])) if dt.strptime(df_clean['Date'][i], "%Y-%m-%d")>=start and dt.strptime(df_clean['Date'][i], "%Y-%m-%d")<=end]
  # MT_daily_death = [int(df_clean['MT daily death'][i]) for i in range(0, len(df_clean['Date'])) if dt.strptime(df_clean['Date'][i], "%m/%d/%Y")>=start and dt.strptime(df_clean['Date'][i], "%m/%d/%Y")<=end]
  # NC_daily_death = [int(df_clean['NC daily death'][i]) for i in range(0, len(df_clean['Date'])) if dt.strptime(df_clean['Date'][i], "%m/%d/%Y")>=start and dt.strptime(df_clean['Date'][i], "%m/%d/%Y")<=end]
  return cases, death

cases, death = get_data(start, end, df_clean)

plt.plot(cases)
y1 = []
total=0
for x in cases:
  total += x
  y1.append(total)
# y1 = [y1[i]/total for i in range(len(y1))]
# print(y1[])
# plt.plot(y1)

ecdf = np.ones(max(cases))
for x in range(max(cases)):
  ecdf[x] = np.searchsorted(cases,x,side='right')/len(cases)
plt.plot(ecdf)

